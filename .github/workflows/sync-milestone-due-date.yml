name: Sync Milestone Due Dates to Project Field

on:
  issues:
    types: [opened, edited, milestoned]
  schedule:
    - cron: '0 * * * *'  # optional: run hourly to ensure sync

jobs:
  sync-due-date:
    runs-on: ubuntu-latest

    steps:
      - name: Sync Milestone Due Date to Project Field
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;

            if (!issue.milestone) {
              console.log("No milestone assigned.");
              return;
            }

            const milestone = await github.rest.issues.getMilestone({
              owner: context.repo.owner,
              repo: context.repo.repo,
              milestone_number: issue.milestone.number,
            });

            const dueDate = milestone.data.due_on;
            if (!dueDate) {
              console.log("Milestone has no due date.");
              return;
            }

            // Your project number and field ID (replace with actual IDs)
            const PROJECT_ID = 'PUT_PROJECT_ID_HERE';
            const FIELD_ID = 'PUT_FIELD_ID_HERE';

            // Find project item ID by issue ID
            const { data: projects } = await github.graphql(`
              query($id: ID!) {
                repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                  issue(number: ${issue.number}) {
                    projectItems(first: 10) {
                      nodes {
                        id
                        project {
                          id
                        }
                      }
                    }
                  }
                }
              }
            `);

            const projectItem = projects.repository.issue.projectItems.nodes.find(item => item.project.id === PROJECT_ID);
            if (!projectItem) {
              console.log("Issue not found in specified project.");
              return;
            }

            // Update the custom date field
            await github.graphql(`
              mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "${PROJECT_ID}",
                  itemId: "${projectItem.id}",
                  fieldId: "${FIELD_ID}",
                  value: {
                    date: "${dueDate}"
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `);
